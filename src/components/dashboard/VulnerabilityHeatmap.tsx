
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { 
  ResponsiveContainer, 
  ScatterChart, 
  Scatter, 
  XAxis, 
  YAxis, 
  ZAxis,
  Tooltip, 
  CartesianGrid,
  Cell
} from 'recharts';

interface VulnerabilityData {
  frequency: number;
  severity: number;
  type: string;
  count: number;
}

export const VulnerabilityHeatmap = () => {
  const [data, setData] = useState<VulnerabilityData[]>([]);

  useEffect(() => {
    // Initialize with some data
    const vulnerabilityTypes = ['XSS', 'SQLi', 'CSRF', 'LFI', 'RCE', 'File Upload'];
    const initialData: VulnerabilityData[] = [];

    // Generate some random data points
    vulnerabilityTypes.forEach(type => {
      const count = Math.floor(Math.random() * 10) + 1;
      initialData.push({
        frequency: Math.floor(Math.random() * 100) + 1,
        severity: Math.floor(Math.random() * 5) + 1,
        type,
        count
      });
    });

    setData(initialData);

    // Update data when a scan is completed
    const handleScanComplete = (event: CustomEvent) => {
      const { vulnerabilities = 0 } = event.detail;
      
      if (vulnerabilities > 0) {
        // Generate new data point based on the completed scan
        const vulnerabilityType = vulnerabilityTypes[Math.floor(Math.random() * vulnerabilityTypes.length)];
        const severityLevel = Math.floor(Math.random() * 5) + 1;
        
        setData(prev => {
          // Check if we have this type already
          const existingIndex = prev.findIndex(item => item.type === vulnerabilityType);
          
          if (existingIndex >= 0) {
            // Update existing vulnerability
            const updated = [...prev];
            updated[existingIndex] = {
              ...updated[existingIndex],
              frequency: updated[existingIndex].frequency + Math.floor(Math.random() * 10) + 5,
              count: updated[existingIndex].count + 1
            };
            return updated;
          } else {
            // Add new vulnerability type
            return [...prev, {
              frequency: Math.floor(Math.random() * 30) + 10,
              severity: severityLevel,
              type: vulnerabilityType,
              count: 1
            }];
          }
        });
      }
    };

    window.addEventListener('scanComplete', handleScanComplete as EventListener);
    
    return () => window.removeEventListener('scanComplete', handleScanComplete as EventListener);
  }, []);

  // Get color based on severity
  const getSeverityColor = (severity: number) => {
    switch (severity) {
      case 1: return '#22c55e'; // Low - Green
      case 2: return '#84cc16'; // Low-Medium - Lime
      case 3: return '#eab308'; // Medium - Yellow
      case 4: return '#f97316'; // Medium-High - Orange
      case 5: return '#ef4444'; // High - Red
      default: return '#84cc16';
    }
  };

  return (
    <Card className="bg-card/50 backdrop-blur-sm border-purple-900/30 shadow-lg shadow-purple-500/5">
      <CardHeader>
        <CardTitle className="text-xl font-bold">Vulnerability Heatmap</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="h-64 w-full">
          <ResponsiveContainer width="100%" height="100%">
            <ScatterChart
              margin={{ top: 20, right: 20, bottom: 20, left: 20 }}
            >
              <CartesianGrid strokeDasharray="3 3" className="stroke-muted/20" />
              <XAxis 
                type="number" 
                dataKey="frequency" 
                name="Frequency" 
                tick={{ fill: 'currentColor' }} 
                stroke="currentColor"
                label={{ value: 'Frequency', position: 'insideBottom', offset: -10 }}
              />
              <YAxis 
                type="number" 
                dataKey="severity" 
                name="Severity" 
                tick={{ fill: 'currentColor' }} 
                stroke="currentColor"
                domain={[0, 5]}
                label={{ value: 'Severity', angle: -90, position: 'insideLeft' }}
              />
              <ZAxis 
                type="number" 
                dataKey="count" 
                range={[60, 400]} 
                name="Count"
              />
              <Tooltip 
                content={({ active, payload }) => {
                  if (active && payload && payload.length) {
                    const data = payload[0].payload;
                    return (
                      <div className="bg-card p-3 border border-border rounded-md shadow-md">
                        <p className="font-medium">{data.type}</p>
                        <p className="text-sm">Frequency: {data.frequency}</p>
                        <p className="text-sm">Severity: {data.severity}/5</p>
                        <p className="text-sm">Count: {data.count}</p>
                      </div>
                    );
                  }
                  return null;
                }}
              />
              <Scatter name="Vulnerabilities" data={data}>
                {data.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={getSeverityColor(entry.severity)} />
                ))}
              </Scatter>
            </ScatterChart>
          </ResponsiveContainer>
        </div>
      </CardContent>
    </Card>
  );
};
